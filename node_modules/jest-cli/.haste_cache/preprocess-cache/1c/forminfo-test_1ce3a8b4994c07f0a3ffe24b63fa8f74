'use strict';

jest.unmock('../../../client/views/formInfo');
jest.unmock('../../../client/views/vendor');
jest.unmock('../../../client/views/state');
jest.unmock('react-router');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom'); /* istanbul ignore next */var _reactDom2 = _interopRequireDefault(_reactDom);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils'); /* istanbul ignore next */var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);
var /* istanbul ignore next */_formInfo = require('../../../client/views/formInfo'); /* istanbul ignore next */var _formInfo2 = _interopRequireDefault(_formInfo);
var /* istanbul ignore next */_reactRouter = require('react-router'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


describe('FormInfo', function () {

  var parentControl = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_formInfo2.default, /* istanbul ignore next */null));

  /*it("Gets all three input type textboxes", function () {    
    const inputs = TestUtils.scryRenderedDOMComponentsWithTag(parentControl, 'input');
    expect(inputs.length).toEqual(3);
  });
  
  it("Gets TextArea field", function () {
    const textarea = TestUtils.scryRenderedDOMComponentsWithTag(parentControl, 'textarea');
    expect(textarea.length).toEqual(1);
  });
   it("Should get form", function () {
    const formInfo = TestUtils.scryRenderedDOMComponentsWithTag(parentControl, 'form');
    expect(formInfo.length).toEqual(1);
  });
   it("Gets TextArea field", function () {
    const inputFile = TestUtils.scryRenderedDOMComponentsWithClass(parentControl, 'form-control-file');
    expect(inputFile.length).toEqual(1);
  });*/



  it('should not submit the form when it is not valid', function () {
    var inputs = /* istanbul ignore next */_reactAddonsTestUtils2.default.scryRenderedDOMComponentsWithTag(parentControl, 'input');

    //var sessionStub =  TestUtils.Simulate.click();
    //btn btn-info pull-right

    var btnSave = inputs[4];



    console.log(inputs[0].name);
    console.log(inputs[0].maxLength);

    inputs[0].value = null;
    /* istanbul ignore next */_reactAddonsTestUtils2.default.Simulate.click(btnSave);

    //expect(sessionStub).to.not.have.been.called;
  });

  /*it("Saves input values", function () {
    
    ["input"].forEach(function (key) {            
    var input = TestUtils.scryRenderedDOMComponentsWithTag(parentControl, key);
    console.log("key" + key);
    console.log(input[0].name);
    TestUtils.Simulate.change(input[0],  {target: {value: "Maxwell" + input[0].name, name: key}});    
    });
  });
   it('should add new form name to textbox', function() {
    var items = TestUtils.scryRenderedDOMComponentsWithTag(parentControl, 'input');
      expect(items.length).toEqual(5);
     
      expect(inputs[0].length).toEqual(1);
      
      TestUtils.Simulate.change(formname,{target: {value: 'food 1'}});
       TestUtils.Simulate.submit(
        TestUtils.findRenderedDOMComponentWithTag(parentControl, 'formInfo')
      );
       items = TestUtils.scryRenderedDOMComponentsWithClass(parentControl, 'form-control formname');
      expect(items.length).toEqual(1);
  });
   it("Should save on submit", function(){
    const formInfo = TestUtils.scryRenderedDOMComponentsWithTag(parentControl, 'formInfo');
    parentControl.done = jest.genMockFunction();
    parentControl.insideDone = jest.genMockFunction();
    TestUtils.Simulate.submit(formInfo);    
    expect(parentControl.insideDone).toBeCalled(); //Success
  });*/});