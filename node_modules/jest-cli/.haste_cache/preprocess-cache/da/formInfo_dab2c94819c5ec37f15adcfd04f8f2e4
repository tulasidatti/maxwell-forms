/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_vendor = require('./vendor'); /* istanbul ignore next */var _vendor2 = _interopRequireDefault(_vendor);
var /* istanbul ignore next */_state = require('./state'); /* istanbul ignore next */var _state2 = _interopRequireDefault(_state);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var FormInfo = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'FormInfo', 

	getInitialState: function /* istanbul ignore next */getInitialState() {
		return { showResults: false, 
			showErrorMssg: false, 
			isActive: 'btn btn-primary pull-right has-spinner' };}, 

	onChange: function /* istanbul ignore next */onChange(event) {
		if (event.target.value.length >= 255) {
			this.setState({ showResults: true });} else 


		{
			this.setState({ showResults: false });}}, 


	validateNotes: function /* istanbul ignore next */validateNotes(event) {

		if (event.target.value.length >= 500) {
			this.setState({ showErrorMssg: true });} else 


		{
			this.setState({ showErrorMssg: false });}}, 


	validateFile: function /* istanbul ignore next */validateFile(event) {

		var myfile = event.target.value;
		var ext = myfile.split('.').pop().toLowerCase();

		if (ext != 'pdf') {
			this.refs.file.value = '';
			this.setState({ showErrMssg: true });} else 


		{
			this.setState({ showErrMssg: false });}}, 


	contextTypes: { 
		router: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired, 
		msg: /* istanbul ignore next */_react2.default.PropTypes.string }, /* istanbul ignore next */


	navigate: function navigate(event) {
		event.preventDefault();
		if (this.refs.formname.value !== '' || this.refs.stateinput.refs.state.value !== '' || this.refs.vendorinput.refs.vendor.value !== '' || this.refs.notes.value !== '' || this.refs.file.value !== '') {
			if (confirm('You have unsaved information, are you sure you want to leave this page?')) {
				this.context.router.push('/');}} else 


		{
			this.context.router.push('/');}}, 



	handleSubmit: function /* istanbul ignore next */handleSubmit(e) {
		this.setState({ isActive: "btn btn-primary pull-right has-spinner active" });
		return;}, /* istanbul ignore next */


	render: function render() {/* istanbul ignore next */var _React$createElement;
		if (this.props.msg == 'success') {
			Messenger().post({ 
				message: 'FormTemplate created successfully!', 
				type: 'success' });

			/* istanbul ignore next */_reactRouter.browserHistory.push('/#/addTemplate');} else 
		if (this.props.msg == 'failure') {
			Messenger().post({ 
				message: 'Failed to Create FormTemplate. Please try again', 
				type: 'error', 
				showCloseButton: true });

			/* istanbul ignore next */_reactRouter.browserHistory.push('/#/addTemplate');}

		return (

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'container panel' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-sm-12' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'panel' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'panel-body' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'row todo-action-bar' }, 

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ className: 'formInfo', role: 'form', /* istanbul ignore next */'data-toggle': 'validator', name: 'addFormTemplate', id: 'addFormTemplate', method: 'post', action: '/forms', encType: 'multipart/form-data', onSubmit: this.handleSubmit }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'row' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-8 form-group' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */null, /* istanbul ignore next */'Form Name * '), 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ onChange: this.onChange, id: 'formname', name: 'name', className: 'form-control', type: 'text', maxLength: '255', ref: 'formname', required: /* istanbul ignore next */true }), 
			this.state.showResults ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'showErrorMsg' }, /* istanbul ignore next */'Can not be more than 255 letters.') : ''), 

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-4 form-group' }), 


			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-8 form-group' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */null, /* istanbul ignore next */'Vendor  '), 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_vendor2.default, /* istanbul ignore next */{ ref: 'vendorinput' })), 

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-4 form-group' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */null, /* istanbul ignore next */'State'), 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_state2.default, /* istanbul ignore next */{ ref: 'stateinput' })), 

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-8 form-group' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */null, /* istanbul ignore next */'Notes'), 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'textarea', /* istanbul ignore next */(_React$createElement = { id: 'notes', name: 'notes', onChange: this.validateNotes, className: 'form-control' }, _defineProperty(_React$createElement, 'id', 'notes'), _defineProperty(_React$createElement, 'maxLength', '500'), _defineProperty(_React$createElement, 'type', 'text'), _defineProperty(_React$createElement, 'ref', 'notes'), _React$createElement)), 
			this.state.showErrorMssg ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'showErrorMsg' }, /* istanbul ignore next */'Can not be more than 500 letters.') : ''), 

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-4 form-group' }), 


			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-8 form-group' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */null, /* istanbul ignore next */'Choose Pdf * '), 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'file', id: 'file', name: 'file', className: 'form-control-file', accept: 'application/pdf', ref: 'file', onChange: this.validateFile, required: /* istanbul ignore next */true }), /* istanbul ignore next */' ( Max 20MB )', 
			this.state.showErrMssg ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'showErrorMsg' }, /* istanbul ignore next */'  Please choose only pdf files.') : ''), 



			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-4 form-group' })), 


			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'row' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'hr', /* istanbul ignore next */{ className: 'hrblack' })), 

			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'col-md-12' }, 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ type: 'submit', className: this.state.isActive, id: 'Save', name: 'Save' }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'spinner' }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'i', /* istanbul ignore next */{ className: 'fa fa-refresh fa-spin' })), /* istanbul ignore next */' Save'), 
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'btn btn-default pull-right', onClick: this.navigate }, /* istanbul ignore next */'Cancel')))))))));} }); /* istanbul ignore next */exports.default = 











FormInfo;