/* istanbul ignore next */"use strict";var stubRouterContext = function stubRouterContext(Component, props, stubs) {
  function RouterStub() {}

  Object.assign(RouterStub, { /* istanbul ignore next */
    makePath: function makePath() {}, /* istanbul ignore next */
    makeHref: function makeHref() {}, /* istanbul ignore next */
    transitionTo: function transitionTo() {}, /* istanbul ignore next */
    replaceWith: function replaceWith() {}, /* istanbul ignore next */
    goBack: function goBack() {}, /* istanbul ignore next */
    getCurrentPath: function getCurrentPath() {}, /* istanbul ignore next */
    getCurrentRoutes: function getCurrentRoutes() {}, /* istanbul ignore next */
    getCurrentPathname: function getCurrentPathname() {}, /* istanbul ignore next */
    getCurrentParams: function getCurrentParams() {}, /* istanbul ignore next */
    getCurrentQuery: function getCurrentQuery() {}, /* istanbul ignore next */
    isActive: function isActive() {}, /* istanbul ignore next */
    getRouteAtDepth: function getRouteAtDepth() {}, /* istanbul ignore next */
    setRouteComponentAtDepth: function setRouteComponentAtDepth() {} }, 
  stubs);

  return React.createClass({ 
    childContextTypes: { 
      router: React.PropTypes.func, 
      routeDepth: React.PropTypes.number }, /* istanbul ignore next */


    getChildContext: function getChildContext() {
      return { 
        router: RouterStub, 
        routeDepth: 0 };}, /* istanbul ignore next */



    render: function render() {
      return (/* istanbul ignore next */React.createElement(Component, props));} });};